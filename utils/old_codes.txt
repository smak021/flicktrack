Ptm Old algo


# def new_algo_ptm(code,ptm_theatre_id,city,bm_id,offset):
#     print("------------------------------------------")
#     tz_NY = pytz.timezone('Asia/Kolkata')   
#     datetime_NY = datetime.now(tz_NY)
#     print("Entered",city,code)
#     url = "https://apiproxy.paytm.com/v3/movies/search/movie?meta=1&reqData=1&city="+city+"&movieCode="+code+"&version=3&site_id=1&channel=HTML5&child_site_id=1" 
#     data = requests.get(url).text
#     if(data):
#         json_data = json.loads(data)
#         show_count = 0 
#         total_seats = 0
#         available_seats = 0
#         price = 0
#         try:
#             theatre = json_data['pageData']['sessions'][ptm_theatre_id]
#         except:
#             print("Show not found")
#             theatre = []
#         for row in theatre:
#             show_count+=1
#             date = row['showTime'].rsplit('T')[0].rsplit('-')
#             ptm_date = date[0]+date[1]+date[2]
#             theatre_code = row['cid']
#             try:
#                 screen_name = row['audi']
#                 print("Screen: ",screen_name)
#             except KeyError:
#                 screen_name='na'
#                 print("not found")
#             print("Name:",json_data['meta']['movies'][0]['name'])
#             my_item = next((item for item in json_data['meta']['cinemas'] if item['id'] == int(ptm_theatre_id)), None)
#             theatre_name = my_item['name']
#             print(theatre_name)
#             for section in row['areas']:
#                 category_name = section['label']
#                 total_seat = section['sTotal']
#                 total_seats += total_seat
#                 if(offset!='na'):
#                     ind_offset = offset.rsplit(',')
#                     for roffset in ind_offset:
#                         offset_splt = roffset.rsplit(':')
#                         if(offset_splt[0]==screen_name):
#                             offset_in = int(offset_splt[1])
#                             break
#                         else:
#                             offset_in = 0
#                 else:
#                     offset_in = 0
#                 print("Offset:", offset_in)
#                 available_seat = (section['sAvail'])
#                 if(total_seat-available_seat < offset_in):
#                     offset_in = 0
#                 available_seats += (available_seat + offset_in)
#                 booked_seat = total_seat-(available_seat + offset_in)
#                 price = price + (section['price'] * booked_seat)
#                 print("Category Name:", category_name)
#                 print("Total:",total_seat)
#                 print("Available: ",available_seat + offset_in)
#                 print("Booked:",booked_seat)
#                 print("Price",price)
#                 cur_time=datetime_NY.strftime('%d/%m/%Y %I:%M %p')  
#         if(show_count != 0):
#             print("Shows",show_count)
#             payload ={"show_date": ptm_date,"show_count":show_count,"category_name": category_name,"theatre_name":theatre_name,"price": price,"booked_seats": total_seats-available_seats,"available_seats": available_seats,"total_seats": total_seats,"theatre_code": theatre_code,"theatre_location": city,"last_modified": cur_time,"film": bm_id}
#             putt = requests.put('http://flicktracks.herokuapp.com/api/porgdata/'+str(theatre_code)+'/'+ptm_date+'/'+bm_id+'/',json=payload, headers={'Content-type': 'application/json'})
#             print(type(ptm_date),type(bm_id),type(theatre_code))
#             print("Status Code:",putt.status_code)
